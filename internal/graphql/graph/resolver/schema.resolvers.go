package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"errors"

	"github.com/bitrise-io/go-utils/stringutil"
	"gorm.io/gorm"

	"github.com/duyike/greddit/internal/graphql/graph"
	"github.com/duyike/greddit/internal/graphql/graph/model"
	dbModel "github.com/duyike/greddit/internal/model"
	"github.com/duyike/greddit/internal/pkg/api"
	"github.com/duyike/greddit/internal/service"
	bizError "github.com/duyike/greddit/pkg/errors"
	"github.com/duyike/greddit/pkg/maths"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, register model.Register) (*model.Token, error) {
	registerUser, err := service.User.Register(register.Username, register.Email, register.Password)
	if err != nil {
		return nil, err
	}
	token, err := api.GenerateJWT(registerUser.Uid)
	if err != nil {
		return nil, err
	}
	return &model.Token{Token: token}, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, create model.CreatePost) (*model.Post, error) {
	// TODO get auth token from fiber context?
	uid := int64(1)
	dbPost, err := service.Post.Create(uid, create.Title, create.Text)
	if err != nil {
		return nil, err
	}
	return &model.Post{
		PostID:     dbPost.PostId,
		CreatorUID: dbPost.CreatorUid,
		Title:      dbPost.Title,
		Text:       dbPost.Text,
		VoteCount:  dbPost.VoteCount,
	}, err
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	// TODO get auth token from fiber context?
	uid := int64(1)
	me, err := service.User.QueryByUid(uid)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, bizError.UserNotExistsError
		} else {
			return nil, err
		}
	}
	return &model.User{
		UID:      me.Uid,
		Username: me.Username,
		Email:    me.Email,
	}, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, usernameLogin *model.UsernameLogin, emailLogin *model.EmailLogin) (*model.Token, error) {
	var u dbModel.User
	var err error
	if usernameLogin != nil {
		u, err = service.User.LoginByUsername(usernameLogin.Username, usernameLogin.Password)
	} else if emailLogin != nil {
		u, err = service.User.LoginByEmail(emailLogin.Email, emailLogin.Password)
	} else {
		return nil, bizError.InvalidParams
	}
	if err != nil {
		return nil, err
	}
	token, err := api.GenerateJWT(u.Uid)
	if err != nil {
		return nil, err
	}
	return &model.Token{Token: token}, err
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, pagination model.Pagination) (*model.HasMorePosts, error) {
	postUsers, err := service.Post.PageQueryPostUser(pagination.Page, pagination.PageSize+1)
	if err != nil {
		return nil, err
	}
	var realPostUsers = postUsers[:maths.Min(len(postUsers), pagination.PageSize)]
	list := make([]*model.Post, len(realPostUsers))
	for i, post := range realPostUsers {
		list[i] = &model.Post{
			PostID:     post.PostId,
			CreatorUID: post.CreatorUid,
			Title:      post.Title,
			Text:       stringutil.MaxFirstCharsWithDots(post.Text, 250),
			VoteCount:  post.VoteCount,
		}
	}
	return &model.HasMorePosts{
		HasMore: len(postUsers) > pagination.PageSize,
		List:    list,
	}, err
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
